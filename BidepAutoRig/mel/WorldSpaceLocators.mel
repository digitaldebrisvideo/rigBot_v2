//  WorldSpaceLocators by John Turello

il_worldSpaceLocators();
global proc il_worldSpaceLocators(){
    // check if the window already exists.
    // Delete it and remove Preferences if necessary
    if(`window -ex "wsLocators_GUI"`){
          deleteUI "wsLocators_GUI";
    }
    // create a window and store the name
	window -title "World Space Locators" "wsLocators_GUI";
	// define the layout of controls added 
	// to the window.
	columnLayout -adj 1;
	
    	separator;
    	// we now initially set the value of the checkbox:
    	checkBox -label "Bake every frame" -value (`optionVar -q ws_bakeEveryFrame`) 
    	// now we store the value on each toggle:
                   -changeCommand "optionVar -iv ws_bakeEveryFrame #1"
                   ws_bakeEveryFrame;
        separator;
        
    			button -label "Bake To Locators" -w 150 -h 30 -command "toLocator()";
    			button -label "Bake From Locators" -w 150 -h 30 -command "fromLocator()";
//		separator;
//                button -label "Parent to Local Space" -w 150 -h 30 -command "localSpaceWrapper()";
        separator;
    			button -label "Create Locator (This Frame)" -w 150 -h 30 -command "toLocator_single()";
    			button -label "Snap to Locator (This Frame)" -w 150 -h 30 -command "fromLocator_single()";
		separator;
    			button -label "Select Locators" -w 150 -h 30 -command "toLocator_SelectLocators()";				
    			button -label "Parent to Locator" -w 150 -h 30 -command "toLocator_Parent()";
//       		button -label "Bake Controls" -w 150 -h 30 -command "safeBakeWrapper";
    			button -label "Delete Constraint" -w 150 -h 30 -command " toLocator_DeleteConstraint()";
        separator; 		
    	// show the window we last created
    	showWindow;

}

global proc toLocator_single(){
    string $selected[]=`ls -sl`;
    for ($node in $selected ){
        string $wsLocatorName = "wsLocator_"+$node; 
    	if (`objExists $wsLocatorName`){
    		delete $wsLocatorName;
    	}
        spaceLocator -name $wsLocatorName;
        setAttr ($wsLocatorName+".rotateOrder") `getAttr ($node+".rotateOrder")`;
        delete `parentConstraint $node $wsLocatorName`;
        select -add $wsLocatorName;
    	select -deselect $node;         
        }
    select -clear;
    select $selected;    
}

global proc fromLocator_single(){
    string $objects[]=`ls -sl`;
    string $node = "";
    for ($node in $objects ){
        string $wsLocatorName = "wsLocator_"+$node; 
    	if ( `objExists $wsLocatorName`){  
        	if (catch (`parentConstraint -n ($node+"_wsLocatorParentConstraint") $wsLocatorName $node`)) { 
                if (catch (`pointConstraint -n ($node+"_wsLocatorParentConstraint") $wsLocatorName $node`)) {
                    if (catch (`orientConstraint -n ($node+"_wsLocatorParentConstraint") $wsLocatorName $node`)) {
                        print "No channels available to constrain";
                    }
                } 
            }     
            setKeyframe $node;
            delete ($node+"_wsLocatorParentConstraint");                
        }
    }
}

global proc localSpaceWrapper(){
    python("import sys\nsys.path.append('L:/centralisedPlugins/3d/Release/Maya/Film/scripts/animation/worldSpaceLocators')\nimport localSpace\nreload(localSpace)\nlocalSpace.run_it()");
}

global proc safeBakeWrapper(){
    python("import il_anim_cmds\nreload(il_anim_cmds)\nil_anim_cmds.safe_bake()");
}

global proc toLocator(){
    int $smartBake = (`optionVar -q ws_bakeEveryFrame`-1)*-1;
    string $selected[]=`ls -sl`;
    if (`size $selected` > 0){
        $currentpanel = `getPanel -wf`;
        $currentCamera = `lookThru -q`;
        // Assert that the current panel is a modelPanel
        string $panelType = `getPanel -to $currentpanel`;
        if ($panelType == "modelPanel"){
            scriptedPanel -e -rp $currentpanel renderView;   
            string $locators[];
            string $locatorParentConstraints[];
            int $i = 0;
            int $start = `playbackOptions -q -ast`;
            int $end = `playbackOptions -q -aet`;
                
            for ($node in $selected ){
            
                string $wsLocatorName = "wsLocator_"+$node; 
            	if (`objExists $wsLocatorName`){
            		delete $wsLocatorName;
            	}
                spaceLocator -name $wsLocatorName;
                $locators[$i] = $wsLocatorName;
                
                setAttr ($wsLocatorName+".rotateOrder") `getAttr ($node+".rotateOrder")`;
                
                parentConstraint -n ($wsLocatorName+"_wsLocatorParentConstraint")  $node $wsLocatorName; 
                $locatorParentConstraints[$i] = ($wsLocatorName+"_wsLocatorParentConstraint");
                       
            	$i+=1;
                }
            select $locators;
            bakeResults -t  ($start+":"+$end) -simulation true -smart $smartBake -preserveOutsideKeys true -sparseAnimCurveBake false -removeBakedAttributeFromLayer false -bakeOnOverrideLayer false -minimizeRotation true -controlPoints false -shape true;
            delete $locatorParentConstraints;
            doKeyTangent "-e -itt auto -ott auto" graphEditor1GraphEd "useSmoothness bufferCurve";
            select -clear;
            select $selected;    
            modelPanel -e -rp renderView $currentpanel; 
        }else{
			confirmDialog -title "Warning" -message "Please Select a Model Panel";
		}
    }
}

global proc fromLocator(){
    int $smartBake = (`optionVar -q ws_bakeEveryFrame`-1)*-1;
    string $selected[]=`ls -sl`;
    if (`size $selected` > 0){
        $currentpanel = `getPanel -wf`;
        $currentCamera = `lookThru -q`;
        // Assert that the current panel is a modelPanel
        string $panelType = `getPanel -to $currentpanel`;
        if ($panelType == "modelPanel"){
            scriptedPanel -e -rp $currentpanel renderView;   
            string $locatorParentConstraints[];
            int $i = 0;
            int $start = `playbackOptions -q -ast`;
            int $end = `playbackOptions -q -aet`;
                
            for ($node in $selected ){   
                string $wsLocatorName = "wsLocator_"+$node;
    			if ( `objExists $wsLocatorName`){
    			    if (catch (`parentConstraint -n ($node+"_wsLocatorParentConstraint") $wsLocatorName $node`)) { 
                        if (catch (`pointConstraint -n ($node+"_wsLocatorParentConstraint") $wsLocatorName $node`)) {
                            if (catch (`orientConstraint -n ($node+"_wsLocatorParentConstraint") $wsLocatorName $node`)) {                    
                            }
                        }
                    }
                    $locatorParentConstraints[$i] = ($node+"_wsLocatorParentConstraint");              
                	$i+=1;
                }
            }    
            select $selected;    
            bakeResults -t  ($start+":"+$end) -simulation true -smart $smartBake -preserveOutsideKeys true -sparseAnimCurveBake false -removeBakedAttributeFromLayer false -bakeOnOverrideLayer false -minimizeRotation true -controlPoints false -shape true;
            delete $locatorParentConstraints;
            select -clear;
            select $selected;    
            doKeyTangent "-e -itt auto -ott auto" graphEditor1GraphEd "useSmoothness bufferCurve";
            modelPanel -e -rp renderView $currentpanel; 
        }else{
            confirmDialog -title "Warning" -message "Please Select a Model Panel";
        }
    }
} 

global proc toLocator_Parent(){
    string $selected[]=`ls -sl`;
    string $locators[];
    string $locatorParentConstraints[];
    int $i = 0;
        
    for ($node in $selected ){    
        string $wsLocatorName = "wsLocator_"+$node; 
        
        if ( `objExists $wsLocatorName`){     
    	    if (catch (`parentConstraint -n ($node+"_wsLocatorParentConstraint") $wsLocatorName $node`)) { 
                if (catch (`pointConstraint -n ($node+"_wsLocatorParentConstraint") $wsLocatorName $node`)) {
                    if (catch (`orientConstraint -n ($node+"_wsLocatorParentConstraint") $wsLocatorName $node`)) {
                        
                    }
                }
            }
        }
    }

    select $selected;    
}

global proc toLocator_DeleteConstraint(){
    string $selected[]=`ls -sl`;
    int $i = 0;
	if (`size $selected` > 0){ 
		string $locatorParentConstraints[];
	
		for ($node in $selected ){                     
			$locatorParentConstraints[$i] = ($node+"_wsLocatorParentConstraint");              
			$i+=1;
			}
		delete $locatorParentConstraints;   
	}
}

global proc toLocator_SelectLocators(){
    string $selected[]=`ls -sl`;
	
	if (`size $selected` > 0){ 
		select -clear;
		for ($node in $selected ){                     
			select -add ("wsLocator_"+$node); 
			}
		
	}
}
/*Replaced with Safe Bake Tool

global proc toLocator_Bake(){
    int $smartBake = (`optionVar -q ws_bakeEveryFrame` -1)*-1;
    string $selected[]=`ls -sl`;
	if (`size $selected` > 0){
		$currentpanel = `getPanel -wf`;
		$currentCamera = `lookThru -q`;
		// Assert that the current panel is a modelPanel
        string $panelType = `getPanel -to $currentpanel`;
        if ($panelType == "modelPanel"){
    		scriptedPanel -e -rp $currentpanel renderView;   
    		string $locatorParentConstraints[];
    		int $i = 0;
    		int $start = `playbackOptions -q -ast`;
    		int $end = `playbackOptions -q -aet`;
    			
    		for ($node in $selected ){                     
    			$locatorParentConstraints[$i] = ($node+"_wsLocatorParentConstraint");              
    			$i+=1;
    			}
    			
    		select $selected;    
    		bakeResults -t  ($start+":"+$end) -simulation true -smart $smartBake -preserveOutsideKeys true -sparseAnimCurveBake false -removeBakedAttributeFromLayer false -bakeOnOverrideLayer false -minimizeRotation true -controlPoints false -shape true;
    		delete $locatorParentConstraints;
    		select -clear;
    		select $selected;    
    		doKeyTangent "-e -itt auto -ott auto" graphEditor1GraphEd "useSmoothness bufferCurve";
    		modelPanel -e -rp renderView $currentpanel; 
        }else{
            confirmDialog -title "Warning" -message "Please Select a Model Panel";
        }
	}
}*/

