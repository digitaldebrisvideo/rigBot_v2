//IKFKSwitcher
//created by Manny Wong Apr 02 2019
//running this script will activate the UI




global proc vector getVectorFromFloats( float $p[], float $p1[] )
{
    vector $v = <<($p[0]-$p1[0]), ($p[1]-$p1[1]), ($p[2]-$p1[2])>>;
    return $v;
}
//////////////////////////////////////

global proc float getDistFromFloats( float $p[], float $p1[] )
{
	float $dist = mag(<<($p[0]-$p1[0]), ($p[1]-$p1[1]), ($p[2]-$p1[2])>>);
	
	return $dist;
}

//////////////////////////////////////////////////////////////

global proc updateSpaceSwitch()
{
    //  UPDATE SPACE
    
    //print "CHECKING SPACE\n";
    if (`window -exists "IKFKSwitcherUI"`)
    {
    	string $armParts[] = {"shoulder", "elbow", "hand"};
    	string $legParts[] = {"thigh", "knee", "foot", "toe", "heel", "leg"};
    	
    	string $sel[] = `ls -sl`;
    	if(size($sel))
    	{
        	string $parts[];
        	tokenize($sel[0], ":", $parts);
        	string $ref = $parts[0];
        	string $name = $parts[1];
        	
        	string $side = "Lt";
        	if(`gmatch $name "*_Rt_*"`)
        	    $side = "Rt";
        
            int $match = $index = 0;
            string $spaceAttrs[], $CON_spaceAttrs[];
            clear $spaceAttrs $CON_spaceAttrs;
        	for($part in $armParts)
        	{
            	//print ("COMPARING: "+$name+" TO: "+$part+"\n");
        	    if(`gmatch $name ($part+"*")`)
        	    {
                	$match = 1;
                	string $parent[] = `listRelatives -parent -pa ($ref+":handIk_"+$side+"_anim")`;
                	string $parcon[] = stringArrayRemoveDuplicates(`listConnections -s 1 -d 0 -type "parentConstraint" $parent[0]`);
                	while(!size($parcon))
                	{
                	    $parent = `listRelatives -parent -pa $parent[0]`;
                	    $parcon = stringArrayRemoveDuplicates(`listConnections -s 1 -d 0 -type "parentConstraint" $parent[0]`);
                	}
                	
                	$spaceAttrs = `listAttr -ud $parcon[0]`;
                	for($i=0;$i<size($spaceAttrs);$i++)
                	{
                	    string $suffix = `match "W[0-9]$" $spaceAttrs[$i]`;
                	    //$spaceAttrs[$i] = `substitute $suffix $spaceAttrs[$i] ""`;
						
                	    string $attr = `substitute $suffix $spaceAttrs[$i] ""`;
                	    $CON_spaceAttrs[$i] = $attr;
						if(!`objExists ($ref+":handIk_"+$side+"_anim."+$attr)`)
						{
							string $scons[] = `listConnections -s 1 -d 0 -p 1 ($parcon[0]+"."+$spaceAttrs[$i])`;
							string $parts[];
							tokenize($scons[0], ".", $parts);
							$CON_spaceAttrs[$i] = $parts[1];
						}

                    	if(`getAttr ($ref+":handIk_"+$side+"_anim."+$CON_spaceAttrs[$i])`)
                    	    $index = $i+1;
                	}
                	break;
        	    }
        	}
        	
    	    if($match)
    	    {
                string $cmd = "textScrollList -e -ra";
                for($attr in $spaceAttrs)
                    $cmd += (" -append "+$attr);
                
                $cmd += (" -sii "+$index+" armSpaceLST");
                //print "\n-----  UPDATING ARM SPACE  -----\n\n";
                
                eval($cmd);
    	    }
        	else
        	{
            	for($part in $legParts)
            	{
                	//print ("COMPARING: "+$name+" TO: "+$part+"\n");
            	    if(`gmatch $name ($part+"*")`)
            	    {
                    	$match = 1;
                    	string $parent[] = `listRelatives -parent -pa ($ref+":legIk_"+$side+"_anim")`;
                    	string $parcon[] = stringArrayRemoveDuplicates(`listConnections -s 1 -d 0 -type "parentConstraint" $parent[0]`);
                    	while(!size($parcon))
                    	{
                    	    $parent = `listRelatives -parent -pa $parent[0]`;
                    	    $parcon = stringArrayRemoveDuplicates(`listConnections -s 1 -d 0 -type "parentConstraint" $parent[0]`);
                    	}

                    	$spaceAttrs = `listAttr -ud $parcon[0]`;
                    	clear $CON_spaceAttrs;
                    	for($i=0;$i<size($spaceAttrs);$i++)
                    	{
                    	    string $suffix = `match "W[0-9]$" $spaceAttrs[$i]`;
                    	    //$spaceAttrs[$i] = `substitute $suffix $spaceAttrs[$i] ""`;
							
							string $attr = `substitute $suffix $spaceAttrs[$i] ""`;
							$CON_spaceAttrs[$i] = $attr;
							if(!`objExists ($ref+":legIk_"+$side+"_anim."+$attr)`)
							{
								string $scons[] = `listConnections -s 1 -d 0 -p 1 ($parcon[0]+"."+$spaceAttrs[$i])`;
								string $parts[];
								tokenize($scons[0], ".", $parts);
								$CON_spaceAttrs[$i] = $parts[1];
							}

							if(`getAttr ($ref+":legIk_"+$side+"_anim."+$CON_spaceAttrs[$i])`)
                        	    $index = $i+1;
                    	}
                    	break;
                    }
                }

        	    if($match)
        	    {
                    string $cmd = "textScrollList -e -ra";
                    for($attr in $spaceAttrs)
                        $cmd += (" -append "+$attr);
                    
                    $cmd += (" -sii "+$index+" legSpaceLST");
                    //print "\n-----  UPDATING LEG SPACE  -----\n\n";
                    
                    eval($cmd);
                }
        	}    //  end of match condition
        }    //  end of sel condition
    }    //  end of window condition
}	//  end of updateSpaceSwitch


//////////////////////////////////////////////////////////////

global proc ikfkSwitch( string $node )
{
	//  GET AUTOKEY STATE
	
	int $autokey = `autoKeyframe -q -state`;
	autoKeyframe -state 0;
	
	//  DETERMINE LIMB AND SIDE
	
    global string $gPlayBackSlider;
	string $parts[];
	tokenize($node, ":", $parts);
	string $ref = $parts[0];
	string $name = $parts[1];
	
	string $armParts[] = {"shoulder", "elbow", "hand", "arm"};
	string $legParts[] = {"thigh", "knee", "foot", "toe", "heel", "leg"};
	
	string $limb;
	int $match = 0;
	for($part in $armParts)
	{
	    if(`gmatch $name ($part+"*")`)
	    {
	        $limb = "arm";
	        $match = 1;
	        break;
	    }
	}
	
	if(!$match)
	{
	    for($part in $legParts)
	    {
	        if(`gmatch $name ($part+"*")`)
	        {
	            $limb = "leg";
	            $match = 1;
	        }
	    }
	}
	
	if($match)
	{
		float $frameRange[] = `timeControl -q -rangeArray $gPlayBackSlider`;    			
    	string $side = "Lt";
    	if(`gmatch $name "*_Rt_*"`)
    	    $side = "Rt";
    	
    	string $node = ($ref+":"+$limb+"IKFK_"+$side+"_anim");
    	int $val = `getAttr ($node+".FK_IK")`;
    	if($val == 1)
    		snapFKtoIK( $node );
    	else
    		snapIKtoFK( $node );
    		
		setAttr ($node+".FK_IK") (1 - $val);
		
		print ("\n\"setAttr "+$node+".FK_IK "+(1 - $val)+"\";\n");

		if(`radioButtonGrp -exists keyBTN`)
    	{
    		int $key = (`radioButtonGrp -q -sl keyBTN` - 1);
    		$key = clamp(0, 1, $key);
    		if($key)
    		{
	            if($frameRange[0] == `currentTime -q`)
    			{
        			print ("KEYFRAMING SWITCH: "+$node+"\n");
        			setKeyframe -itt "stepnext" -ott "step" ($node+".FK_IK");
        			
        			string $anims[] = `listConnections -s 1 -d 0 -type animCurve ($node+".FK_IK")`;
        			keyTangent -ott "step" $anims[0];
        		}
        	}
        }
    }
    else
        error "Must select an appropriate part of the character";

	autoKeyframe -state $autokey;
}	//  end of ikfkSwitch

///////////////////////////////////////////
global proc snapFKtoIK( string $node )
{
    global string $gRotate;
    global string $gPlayBackSlider;
	string $chains[] = {"leg", "arm", "spine"};
	
	/*
	string $sel[] = `ls -sl`;
	string $node = $sel[0];
	*/

	//  GET KEYFRAME MODE
	
	int $key = (`radioButtonGrp -q -sl keyBTN` - 1);
	$key = clamp(0, 1, $key);
	print("KEY: "+$key+"\n");
    
	//  CHECK FOR REFERENCING
	
	string $parts[];
	tokenize($node, ":", $parts);
	string $ref = "";
	if(size($parts) > 1)
		$ref = $parts[0];
	
	string $CON = "";
	for($i=0;$i<size($chains);$i++)
	{
		string $pattern = ($chains[$i]+"*");
		if(size($ref))
			$pattern = ($ref+":"+$pattern);
		
		if(`gmatch $node $pattern`)
			break;
	}
	
	//  DETERMINE SIDE
	
	if($i < 2)
	{
		string $sides[] = {"Lt", "Rt"};
		for($side in $sides)
		{
			//  string $side = $sides[0];
			string $pattern = ("*_"+$side+"_*");
			if(size($ref))
				$pattern = ($ref+":"+$pattern);
			
			if(`gmatch $node $pattern`)
			{
				$CON = ($chains[$i]+"Ik_"+$side+"_anim");
				if(size($ref))
					$CON = ($ref+":"+$CON);

				if($i==1)
					$CON = `substitute $chains[$i] $CON "hand"`;
				
				break;
			}
		}
	}
	//else    //  SPINE
	
	//  MAKE SURE IK CONTROL NODE IS NOT IN A NAMESPACE
	/*
	string $ref = "";
	if(!`objExists $CON`)
	{
		string $check[] = `ls ("*:"+$CON)`;
		if(size($check))
		{
			$CON = $check[0];
			string $parts[];
			tokenize($CON, ":", $parts);
			$ref = $parts[0];
		}
	}
	*/
	print ("IK CONTROL NODE: "+$CON+"\n");
    
    //  GET SCRUBBED RANGE IF ANY
    
    int $mode = 0;
    float $frameRange[] = `timeControl -q -rangeArray $gPlayBackSlider`;
	if($frameRange[0] != `currentTime -q`)
	    $mode = 1;
	
	//  GET FRAME RANGE OF CONTROL ANIMATION
	
	string $anims[] = `listConnections -s 1 -d 0 -type animCurve $CON`;
	float $keys[];
	clear $keys;
	int $start = $end = 0;
	if(size($anims))
	{
    	for($anim in $anims)
    	{
    	    float $keys1[] = `keyframe -q -tc $anim`;
    	    for($k=0;$k<size($keys1);$k++)
    	        $keys[size($keys)] = $keys1[$k];
    	}
        
        //  print $keys;
        //  REMOVE DUPLICATES
        
        string $keysStringArray[] = sort(stringArrayRemoveDuplicates(stringToStringArray( floatArrayToString($keys, " "), " ")));
        for($k=0;$k<size($keysStringArray)-1;$k++)
        {
            if(size($keysStringArray[$k]) > size($keysStringArray[$k+1]))
            {
                float $val = $keysStringArray[$k];
                $keysStringArray[$k] = $keysStringArray[$k+1];
                $keysStringArray[$k+1] = $val;
                
            }
        }
        
        //  print $keysStringArray;
        clear $keys;
        
        for($k=0;$k<size($keysStringArray);$k++)
        {
            $keys[$k] = $keysStringArray[$k];
            if($keys[$k] > `currentTime -q`)
            {
                $start = $k-1;
                break;
            }
        }
        
    	$end = $start;

    	if($mode == 1)
    	{
            $mode = 1;
            for($k=0;$k<size($keys);$k++)
            {
                if($keys[$k] >= $frameRange[0])
                {
            	    $start = $k;
        	        break;
                }
            }
            
            for($k=0;$k<size($keys);$k++)
            {
                if($keys[$k] >= $frameRange[1])
                {
            	    $end = $k-1;
        	        break;
        	    }
            }
    	}
	}
	else
	    $keys[0] = `currentTime -q`;

	//  print $keys;
	print ("START: "+$keys[$start]+"\n");
	print ("END: "+$keys[$end]+"\n");

    string $FKroot = "";
    for($k=$start;$k<=$end;$k++)
    {
    	if($mode == 1)
        	currentTime $keys[$k];
    	
    	if($key)
    	{
    	    //  CHECK IF IK IS KEYED, IF NOT THEN JUST START IN FK MODE
    	    
        	string $anims[] = `listConnections -s 1 -d 0 -type animCurve ($CON+".tx")`;
        	if(size($anims))
        	{
        		print ("KEYING: "+$CON+"\n");
        		for($attr in `listAttr -k $CON`)
        		    setKeyframe ($CON+"."+$attr);
        	
        		//  GET IK HANDLES TO KEY POLE VECTORS
        		
        		string $ikHandles[] = `listRelatives -ad -type "ikHandle" $CON`;
        		//  print $ikHandles;
        		string $allJts[] = `ls -type joint`;
        		string $animJts[] = `ls -type joint "*_anim"`;
        		$animJts = stringArrayCatenate($animJts, `ls -type joint ($ref+":*_anim")`);
        		string $rmJts[] = stringArrayRemove($animJts, $allJts);
        		string $pcons[] = stringArrayRemoveDuplicates(`listConnections -s 1 -d 0 -type poleVectorConstraint $ikHandles`);
        		string $poleCtl = "";
        		if(size($pcons))
        		{
        			string $scons[] = stringArrayRemove($rmJts, stringArrayRemove($ikHandles, stringArrayRemove($pcons, stringArrayRemoveDuplicates(`listConnections -s 1 -d 0 $pcons`))));
        			$poleCtl = $scons[0];
        			print ("KEYING POLE VECTOR CONTROL: "+$poleCtl+"\n");
        
        			for($attr in `listAttr -k $poleCtl`)
            			setKeyframe ($poleCtl+"."+$attr);
        		}
        	
            	//  GET PREVIOUS KEYFRAME SO WE CAN KEY THE SWITCH
        	
            	float $keys1[] = `keyframe -q -tc $anims[0]`;
            	if(size($keys1)>1)
            	{
            		print("\tKEYFRAMING SWITCH: "+$node+" @ FRAME: "+$keys1[size($keys1)-2]+"\n");
            		setKeyframe -t $keys1[size($keys1)-2] -itt "stepnext" -ott "step" ($node+".FK_IK");
            	}
        	}
        	else
        	    print ("\tNO EXISTING KEYS ON "+$CON+".....WHY NOT START IN FK MODE?\n");
    	}
    	
    	//  GET CONTROLLED JOINT CHAIN
    	
    	string $ikHandles[] = `listRelatives -ad -type "ikHandle" $CON`;
    	if(!size($ikHandles))
    	    $ikHandles = `listConnections -s 0 -d 1 -type "ikHandle" -scn 1 $CON`;
    	
    	//  GET ROOT START JOINT
    	
    	string $rootStartJt = "";
    	int $min = 1000000;
    	for($ikHandle in $ikHandles)
    	{
    		//  string $ikHandle = $ikHandles[0];
    		string $startJt[] = ls("-l", `listConnections -s 1 -d 0 -type joint ($ikHandle+".startJoint")`);
    		string $parts[];
    		tokenize($startJt[0], "|", $parts);
    		if(size($parts) < $min)
    		{
    			$min = size($parts);
    			$rootStartJt = $startJt[0];
    		}
    	}
    	
    	$startJt = `ls $rootStartJt`;
    	$rootStartJt = $startJt[0];
    	print("ROOT START JT: "+$rootStartJt+"\n");
    	
    	//  GET END JOINT
    	
    	string $endJt = "";
    	int $max = 0;
    	for($ikHandle in $ikHandles)
    	{
    		//  string $ikHandle = $ikHandles[0];
    		string $ee[] = ls("-l", `listConnections -s 1 -d 0 ($ikHandle+".endEffector")`);
    		string $parts[];
    		tokenize($ee[0], "|", $parts);
    		if(size($parts) > $max)
    		{
    			$max = size($parts);
    			string $parent[] = `listRelatives -parent $ee[0]`;
    			string $childJt[] = `listRelatives -c -type joint -f $parent[0]`;
    			$endJt = $childJt[0];
    		}
    	}
    	
    	print("END JT: "+$endJt+"\n");
    
    	//  NOW GET JOINT CHAIN
    	
    	tokenize($endJt, "|", $parts);
    	string $listIK[];
    	clear $listIK;
    	int $found = 0;
    	int $size = size($parts);
    	
    	//  CHECK FOR "End" JT
    	
    	string $pattern = "*End_*";
    	if(size($ref))
    		$pattern = ($ref+":"+$pattern);
    	
    	if(`gmatch $parts[$size-1] $pattern`)
    		$size -= 1;
    	
    	for($i=0;$i<$size;$i++)
    	{
    		if($parts[$i] == $rootStartJt)
    			$found = 1;
    		
    		if($found)
    			$listIK[size($listIK)] = $parts[$i];
    	}	
    	
    	//  IF EMPTY LIST, THEN CHECK FOR ALTERNATE JTS
    	
    	if(!size($listIK))
    	{
    	    string $parts1[];
    	    tokenize($rootStartJt, "_", $parts1);
    	    string $pattern = `substitute $parts1[size($parts1)-1] $rootStartJt ""`;
    	    
        	for($i=0;$i<$size;$i++)
        	{
        		if(`gmatch $parts[$i] ($pattern+"*")`)
        			$found = 1;
        		
        		if($found)
        			$listIK[size($listIK)] = $parts[$i];
        	}	
    	}
    	
    	print "\n-----  IK JOINT CHAIN  -----\n";
    	print $listIK;
    	
    	//FIND UNLOCKED ATTRIBUTES AND GET IK VALUES
    	//FILTER OUT CONNECTIONS OTHER THAN ANIMATION CURVES
    	
    	int $count = 0;
    	for($ikNode in $listIK)
    	{
    		//  string $ikNode = $listIK[0];
    		//  string $ikNode = $listIK[1];
    		//  string $ikNode = $listIK[2];
    		//  select -r $ikNode;
    		print("\tIK NODE: "+$ikNode+"\n");
    		//GET ALL KEYABLE ATTRIBUTES ON FK NODE
    		string $fkNode = `substitute "ik" $ikNode "anim"`;
    		//  select -r $fkNode;
    		print("\tFK NODE: "+$fkNode+"\n");
    		
    		if($count==0)
    			$FKroot = $fkNode;
    		
    		//  CHECK FOR ORIENT CONSTRAINTS
    		
    		string $cons[] = stringArrayRemoveDuplicates(`listConnections -s 1 -d 0 -type orientConstraint $fkNode`);
    		if(size($cons))
    		{
    			//  CHECK FOR OFFSET
    			print("\tFK ORIENT CON: "+$cons[0]+"\n");
    			float $off[] = `getAttr ($cons[0]+".offset")`;
    			//print $off;
    		
    			string $cons1[] = stringArrayRemove({$fkNode}, stringArrayRemove($cons, stringArrayRemoveDuplicates(`listConnections -s 1 -d 0 $cons[0]`)));
    			while(!`gmatch $cons1[0] "*_ctl"`)
    				$cons1 = `listRelatives -parent $cons1`;
    			string $dup[] = `duplicate -rr -rc $cons1[0]`;
    			string $oc[];
    			//if(`objExists ($fkNode+"_loc")`)
    			if(`objExists ($cons1[0]+"_loc")`)
    			{
    				//print("\tCONSTRAINING: "+$cons1[0]+" TO: "+$fkNode+"_loc\n");
    				//$oc = `orientConstraint -w 1 ($fkNode+"_loc") $dup[0]`;
    				print("\tCONSTRAINING: "+$cons1[0]+" TO: "+$cons1[0]+"_loc\n");
    				$oc = `orientConstraint -w 1 ($cons1[0]+"_loc") $dup[0]`;
    			}
    			else
    			{
    				print("\tCONSTRAINING: "+$cons1[0]+" TO: "+$ikNode+"\n");
    				$oc = `orientConstraint -w 1 $ikNode $dup[0]`;
    			}
    			print("\tAPPLYING OFFSET: "+$off[0]+" "+$off[1]+" "+$off[2]+"\n");
    			setAttr -type double3 ($oc[0]+".offset") (-$off[0]) (-$off[1]) (-$off[2]);
    			setAttr ($cons1[0]+".rx") `getAttr ($dup[0]+".rx")`;
    			setAttr ($cons1[0]+".ry") `getAttr ($dup[0]+".ry")`;
    			setAttr ($cons1[0]+".rz") `getAttr ($dup[0]+".rz")`;
    			
    			if($key)
    				setKeyframe $cons1[0];
    			
    			delete $dup;
    		}
    		else
    		{
    			print "\tNO ORIENT CON\n";
    			string $dup[] = `duplicate -rr -rc $fkNode`;
    			
    			//  CHECK FOR KEYABLE ROTATION CHANNELS
    			
    			string $keyableAttrs[] = `listAttr -k $dup[0]`;
    			string $rotationAttrs[], $translateAttrs[];
    			clear $rotationAttrs $translateAttrs;
    			for($attr in $keyableAttrs)
    			{
    				if(`gmatch $attr "rotate*"`)
    					$rotationAttrs[size($rotationAttrs)] = $attr;
    				else if(`gmatch $attr "translate*"`)
    					$translateAttrs[size($translateAttrs)] = $attr;
    			}
    			
    			if(size($rotationAttrs) == 3)
    				orientConstraint -w 1 $ikNode $dup[0];
    			else
    			{
    				string $nonKeyables[] = stringArrayRemove($rotationAttrs, {"rotateX", "rotateY", "rotateZ"});
    				string $cmd = "orientConstraint -w 1";
    				for($attr in $nonKeyables)
    				{
    					switch($attr)
    					{
    						case "rotateX":
    							$cmd += " -skip x";
    							break;
    						case "rotateY":
    							$cmd += " -skip y";
    							break;
    						case "rotateZ":
    							$cmd += " -skip z";
    							break;
    						default:
    							break;
    					}
    				}
    				$cmd += (" "+$ikNode+" "+$dup[0]);
    				eval($cmd);
    			}
    
    			for($attr in $rotationAttrs)
    			{
    				setAttr ($fkNode+"."+$attr) `getAttr ($dup[0]+"."+$attr)`;
    				
    				if($key)
    					setKeyframe ($fkNode+"."+$attr);
    			}
    
    			//  ZERO TRANSLATION ATTRS
    			
    			for($attr in $translateAttrs)
    			{
    				setAttr ($fkNode+"."+$attr) 0;
    				
    				if($key)
    					setKeyframe ($fkNode+"."+$attr);
    			}
    			
    			delete $dup;
    		}
    		
    		$count++;
    	}	//  end of listIK loop
    	
    	if($mode)
        	print ("SNAPPED FK TO IK @: "+$keys[$k]+"\n");
        else
        	print ("SNAPPED FK TO IK @: "+`currentTime -q`+"\n");
    }
    
    if($key)
    {
        print "\n-----  KEYING SWITCH  -----\n";
        //  KEY FRAME SWITCH NODE

        if($mode)
        {
            if($start != 0)
            {
                setKeyframe -t $keys[$start-1] -v 1 -itt "stepnext" -ott "step" ($node+".FK_IK");
                print ("SETTING KEYFRAME FOR: "+$node+" @ "+$keys[$start-1]+" == 1\n");
            }
            
            for($k=$start;$k<=$end;$k++)
            {
                if($k == $end)
                {
                    setKeyframe -t $keys[$k] -v 1 -itt "stepnext" -ott "step" ($node+".FK_IK");
                    print ("SETTING KEYFRAME FOR: "+$node+" @ "+$keys[$k]+" == 1\n");
                }
                else
                {
                    setKeyframe -t $keys[$k] -v 0 -itt "stepnext" -ott "step" ($node+".FK_IK");
                    print ("SETTING KEYFRAME FOR: "+$node+" @ "+$keys[$k]+" == 0\n");
                }
            }
        }
        else
        {
            print "\t-----  CURRENT FRAME MODE  -----\n";
            //  print $start;
            if($start != 0)
            {
            	//  print $keys[$start];
            	if($keys[$start] == `currentTime -q`)
            	{
                    print ("\t"+$keys[$start]+" == "+`currentTime -q`+"\n");
                    setKeyframe -t $keys[$start-1] -v 1 -itt "stepnext" -ott "step" ($node+".FK_IK");
                    print ("SETTING KEYFRAME FOR: "+$node+" @ "+$keys[$start-1]+" == 1\n");
                    setKeyframe -t $keys[$start] -v 0 -itt "stepnext" -ott "step" ($node+".FK_IK");
                    print ("SETTING KEYFRAME FOR: "+$node+" @ "+$keys[$start]+" == 0\n");
            	}
            	else if($keys[$start] < `currentTime -q`)
            	{
                    print ("\t"+$keys[$start]+" < "+`currentTime -q`+"\n");
                    setKeyframe -t $keys[$start] -v 1 -itt "stepnext" -ott "step" ($node+".FK_IK");
                    print ("SETTING KEYFRAME FOR: "+$node+" @ "+$keys[$start]+" == 1\n");
                    setKeyframe -t `currentTime -q` -v 0 -itt "stepnext" -ott "step" ($node+".FK_IK");
                    print ("SETTING KEYFRAME FOR: "+$node+" @ "+`currentTime -q`+" == 0\n");
                }
                else
                    print "\t-----  DID NOTHING  -----\n";
            }
            else
                print ("\t-----  START: "+$start+"  -----\n");
        }
    }
        
	select $FKroot;
	setToolTo $gRotate;
	print "FINISHED SNAPPING FK TO IK\n";

}	//end snapFKtoIK

//////////////////////////////////////////
global proc snapIKtoFK( string $node )
{
    /*
    string $sel[] = `ls -sl`;
    string $node = $sel[0];
    print ($node+"\n");
    */
    
    global string $gMove;
    global string $gPlayBackSlider;
	string $chains[] = {"leg", "arm", "spine"};
	float $tolerance = 0.001;
/* 	
	//  GET TIME MODE
	
	int $mode = (`radioButtonGrp -q -sl modeBTN` - 1);
	$mode = clamp(0, 1, $mode);
 	print("MODE: "+$mode+"\n"); 	
*/

    int $mode = 0;
    
	//  GET KEYFRAME MODE
	
	int $key = (`radioButtonGrp -q -sl keyBTN` - 1);
	$key = clamp(0, 1, $key);
 	print("KEY: "+$key+"\n");

	//  CHECK FOR REFERENCING
	
	string $parts[];
	tokenize($node, ":", $parts);
	string $ref = "";
	if(size($parts) > 1)
		$ref = $parts[0];
	
	string $CON = $limb = "";
	for($i=0;$i<size($chains);$i++)
	{
		string $pattern = ($chains[$i]+"*");
		if(size($ref))
			$pattern = ($ref+":"+$pattern);
		
		if(`gmatch $node $pattern`)
		{
			$limb = $chains[$i];
			break;
		}
	}
	
	//  DETERMINE SIDE
	
	if($i < 2)
	{
		string $sides[] = {"Lt", "Rt"};
		for($side in $sides)
		{
			//  string $side = $sides[0];
			string $pattern = ("*_"+$side+"_*");
			if(size($ref))
				$pattern = ($ref+":"+$pattern);
			
			if(`gmatch $node $pattern`)
			{
				$CON = ($chains[$i]+"Ik_"+$side+"_anim");
				if($i==1)
					$CON = `substitute $chains[$i] $CON "hand"`;
				
				if(size($ref))
					$CON = ($ref+":"+$CON);

				break;
			}
		}
	}
	//else    //  SPINE
	
	//  MAKE SURE IK CONTROL NODE IS NOT IN A NAMESPACE
	/*
	string $ref = "";
	if(!`objExists $CON`)
	{
		string $check[] = `ls ("*:"+$CON)`;
		if(size($check))
		{
			$CON = $check[0];
			string $parts[];
			tokenize($CON, ":", $parts);
			$ref = $parts[0];
		}
	}
	*/
	print ("IK CONTROL NODE: "+$CON+"\n");
	print ("LIMB: "+$limb+"\n");
	
	//  select -r $CON;
	
	//  GET ALL CONTROLS UNDER MAIN IK CONTROL
	
	string $trans[] = `listRelatives -ad -type transform $CON`;
	string $ctls[];
	clear $ctls;
	for($node1 in $trans)
	{
		if(`gmatch $node1 "*_anim"`)
			$ctls[size($ctls)] = $node1;
	}
	
	//  print $ctls;
	
	//  GET IK HANDLES
	
	string $ikHandles[] = `listRelatives -ad -type "ikHandle" $CON`;
	if(!size($ikHandles))
	    $ikHandles = `listConnections -s 0 -d 1 -type "ikHandle" -scn 1 $CON`;
	//  print $ikHandles;
	
	//  IF MORE THAN ONE IK HANDLE, ZERO ALL JOINT RELATED PARAMETERS
	
	//  NEED TO FILTER USER DEFINED ATTRS
	
	string $userAttrs[] = `listAttr -ud $CON`;
	string $keyableAttrs[] = `listAttr -k $CON`;
	//  print $userAttrs;
	//  print $keyableAttrs;

	string $attrs[] = stringArrayRemove($userAttrs, $keyableAttrs);
	for($attr in $userAttrs)
	{
		//  string $attr = $userAttrs[0];
		if(`gmatch $attr "_*"`)
		{
			string $enums[] = `attributeQuery -node $CON -le $attr`;
			if($enums[0] == "spaceSwitch")
				break;
		}
		else
		{
			//  EXCLUDE NOTES
			
			if($attr != "notes")
    			$attrs[size($attrs)] = $attr;
	    }
	}
	
	//  print $attrs;
	
	//  GET ROOT IK HANDLE AND ROOT START JOINT
	
	string $rootIKHandle = $rootStartJt = "";
	int $min = 1000000;
	for($ikHandle in $ikHandles)
	{
		string $sj[] = ls("-l", `listConnections -s 1 -d 0 -type joint ($ikHandle+".startJoint")`);
		string $parts[];
		tokenize($sj[0], "|", $parts);
		if(size($parts) < $min)
		{
			$min = size($parts);
			$rootIKHandle = $ikHandle;
			$rootStartJt = $sj[0];
		}
	}
	
	print("\nROOT IK HANDLE: "+$rootIKHandle+"\n");
	
	$sj = `ls $rootStartJt`;
	$rootStartJt = $sj[0];
	print("ROOT START JT: "+$rootStartJt+"\n");

	//  GET END EFFECTOR JOINT
	
	string $effector[] = `listConnections -s 1 -d 0 ($rootIKHandle+".endEffector")`;
	//  select -r $effector;
	string $parent[] = `listRelatives -parent -pa $effector[0]`;
	string $parent_IK = $parent[0];
	//  string $parent_FK = `substitute "IK" $parent[0] "FK"`;
	string $effectorJoint[] = `listRelatives -c -type joint $parent_IK`;
	
	//  FIND THE RIGHT JT
	
	string $ejt;
	for($ejt in $effectorJoint)
	{
		float $ep[] = `xform -q -ws -rp $effector[0]`;
		float $jp[] = `xform -q -ws -rp $ejt`;
		float $dist = getDistFromFloats($ep, $jp);
		//  print ($ejt+": "+$dist+"\n");
		if($dist == 0)
			break;
	}
	
	//print ("PARENT IK: "+$parent_IK+"\n");
	//print ("PARENT FK: "+$parent_FK+"\n");
	if($limb == "leg")
		print ("ROOT EFFECTOR JOINT: "+$ejt+"\n");
	else if($limb == "arm")
		print ("ROOT EFFECTOR JOINT: "+$effectorJoint[0]+"\n");
	
	//  GET FK NODES
	
	string $rootFK = `substitute "ik" $rootStartJt "anim"`;
	//  select -r $rootFK;
	
	string $fkNodes[] = `listRelatives -ad -type nurbsCurve -pa $rootFK`;
	string $rmList[];
	clear $rmList;
	for($fkNode in $fkNodes)
	{
		//  string $fkNode = $fkNodes[0];
		int $vis = `getAttr ($fkNode+".visibility")`;
		if($vis == 0)
			$rmList[size($rmList)] = $fkNode;
	}
	
	$fkNodes = stringArrayRemove($rmList, $fkNodes);
	$fkNodes = `listRelatives -parent -pa $fkNodes`;
	
	print "\n-----  FK CONTROLS  -----\n";
	print $fkNodes;
	
	//  LOOK FOR LOCKED ROTATION CHANNELS
		
	int $lockState[3];
	$lockState[0] = `getAttr -l ($fkNodes[1]+".rx")`;
	$lockState[1] = `getAttr -l ($fkNodes[1]+".ry")`;
	$lockState[2] = `getAttr -l ($fkNodes[1]+".rz")`;
	
	string $midIKJt = `substitute "anim" $fkNodes[1] "ik"`;
	print ("\n-----  LOCKING "+$midIKJt+"  -----\n\n");
	for($l=0;$l<3;$l++)
	{
	    switch($l)
	    {
	        case 1:    //  ry
	            setAttr ($midIKJt+".jointTypeY") (1-$lockState[$l]);
	            break;
	        case 2:    //  rz
	            setAttr ($midIKJt+".jointTypeZ") (1-$lockState[$l]);
	            break;
	        default:    //  rx
	            setAttr ($midIKJt+".jointTypeX") (1-$lockState[$l]);
	            break;
	    }
	}
	
	//  CHECK FOR TIME LINE OPTION
	
	float $keys[];
	clear $keys;
	    
    //  GET KEYFRAMES OF FK ANIM CURVES
    
    string $fkAnimCurves[] = `listConnections -type animCurve $fkNodes`;
    for($j=0;$j<size($fkAnimCurves);$j++)
    {
        float $keys1[] = `keyframe -q -tc $fkAnimCurves[$j]`;
        for($k=0;$k<size($keys1);$k++)
            $keys[size($keys)] = $keys1[$k];
    }
    
    //  REMOVE DUPLICATES
    
    string $keysStringArray[] = sort(stringArrayRemoveDuplicates(stringToStringArray( floatArrayToString($keys, " "), " ")));
    for($k=0;$k<size($keysStringArray)-1;$k++)
    {
        if(size($keysStringArray[$k]) > size($keysStringArray[$k+1]))
        {
            float $val = $keysStringArray[$k];
            $keysStringArray[$k] = $keysStringArray[$k+1];
            $keysStringArray[$k+1] = $val;
            
        }
    }

    //  print $keysStringArray;
    clear $keys;
    
    //  GET SCRUBBED RANGE IF ANY
    
    float $frameRange[] = `timeControl -q -rangeArray $gPlayBackSlider`;

	int $start;
    for($k=0;$k<size($keysStringArray);$k++)
    {
        $keys[$k] = $keysStringArray[$k];
        if($keys[$k] > `currentTime -q`)
        {
            $start = $k-1;
            break;
        }
    }
    
	int $end = $start;
	
	//if($mode == 1)
	if($frameRange[0] != `currentTime -q`)
	{
        $mode = 1;
        for($k=0;$k<size($keys);$k++)
        {
            if($keys[$k] >= $frameRange[0])
            {
        	    $start = $k;
    	        break;
            }
        }
        
        for($k=0;$k<size($keys);$k++)
        {
            if($keys[$k] >= $frameRange[1])
            {
        	    $end = $k-1;
    	        break;
    	    }
        }
	}
	
	//  print $keys;
	print ("START: "+$keys[$start]+"\n");
	print ("END: "+$keys[$end]+"\n");
	
	//////////////////////////////////////////////////////////////////////////////////////////////////
    
    for($k=$start;$k<=$end;$k++)
    {
        if($mode)
            currentTime $keys[$k];
        
    	//  REINITIALIZE IK HANDLES
    	
    	$ikHandles = `listRelatives -ad -type "ikHandle" $CON`;
    	if(!size($ikHandles))
    	    $ikHandles = `listConnections -s 0 -d 1 -type "ikHandle" -scn 1 $CON`;
    	
    	print "\n-----  ZEROING CONTROL ATTRIBUTES  -----\n";
    	for($attr in $attrs)
    	{
    		if(`gmatch $attr "Roll_Toe_*"`)
    		{
    			if(`gmatch $attr "*_Lift"`)
    				setAttr ($CON+"."+$attr) 45;
    			else if(`gmatch $attr "*_Straight"`)
    				setAttr ($CON+"."+$attr) 90;
    		}
    		else
			{
    			if(`getAttr -l ($CON+"."+$attr)` == 0)
					setAttr ($CON+"."+$attr) 0;
			}
    	}
		
    	for($ctl in $ctls)
    	{
    		string $attrs[] = `listAttr -k $ctl`;
    		for($attr in $attrs)
    			setAttr ($ctl+"."+$attr) 0;
    	}
    	
    	//  ZERO ANY POLE VECTORS
    	
    	string $allJts[] = `ls -type joint`;
    	string $animJts[] = `ls -type joint "*_anim"`;
    	$animJts = stringArrayCatenate($animJts, `ls -type joint ($ref+":*_anim")`);
    	string $rmJts[] = stringArrayRemove($animJts, $allJts);
    	
    	string $pcons[] = stringArrayRemoveDuplicates(`listConnections -s 1 -d 0 -type poleVectorConstraint $ikHandles`);
    	string $poleCtl = "";
    	if(size($pcons))
    	{
    		//string $scons[] = stringArrayRemove(`ls -type joint`, stringArrayRemove($ikHandles, stringArrayRemove($pcons, stringArrayRemoveDuplicates(`listConnections -s 1 -d 0 $pcons`))));
    		string $scons[] = stringArrayRemove($rmJts, stringArrayRemove($ikHandles, stringArrayRemove($pcons, stringArrayRemoveDuplicates(`listConnections -s 1 -d 0 $pcons`))));
    		$poleCtl = $scons[0];
    		print "\n-----  ZEROING POLE VECTOR CONTROL  -----\n";
    		print $scons;
    
    		string $attrs[] = stringArrayRemove(stringArrayCatenate(`listAttr -ud $scons[0]`, {"visibility"}), `listAttr -k $scons[0]`);
    		for($attr in $attrs)
    			setAttr ($scons[0]+"."+$attr) 0;
    	}
    	
    	//////////////////////////////////////////////////////////////////////////////////////////////////
    	
        string $fkAnims[];
    	if($key)
    	{
    		//  CHECK FOR EXISTING ANIMATION...IF NONE, THEN JUST START IN IK MODE
    
    		for($fkNode in $fkNodes)
    		    $fkAnims = stringArrayCatenate($fkAnims, `listConnections -s 1 -d 0 -type animCurve $fkNode`);
    		
    		if(size($fkAnims))
    		{
        		for($fkNode in $fkNodes)
        		{
        			print ("KEYING FK NODE: "+$fkNode+"\n");
        			for($attr in `listAttr -k $fkNode`)
            			setKeyframe ($fkNode+"."+$attr);
        		}
        	}
        	else
        	    print "\tNO EXISTING ANIM CURVES FOUND FOR FK NODES.....WHY NOT JUST START IN IK MODE?\n";
    	}
    	
    	string $conParent[] = `listRelatives -parent -pa $CON`;
    	
    	// select -r $conParent[0];
    	
    	//  GET SPACE ATTRIBUTES ON CONSTRAINT
    	
    	string $parcon[] = stringArrayRemoveDuplicates(`listConnections -s 1 -d 0 -type "parentConstraint" $conParent`);
    	while(!size($parcon))
    	{
    	    $conParent = `listRelatives -parent -pa $conParent[0]`;
        	$parcon = stringArrayRemoveDuplicates(`listConnections -s 1 -d 0 -type "parentConstraint" $conParent`);
    	}
    	
    	//  print $conParent;
    	
    	string $spaceAttrs[] = `listAttr -ud $parcon[0]`;
    	string $CON_spaceAttrs[];
    	for($i=0;$i<size($spaceAttrs);$i++)
    	{
    	    string $suffix = `match "W[0-9]$" $spaceAttrs[$i]`;
    	    //$spaceAttrs[$i] = `substitute $suffix $spaceAttrs[$i] ""`;
    	    string $attr = `substitute $suffix $spaceAttrs[$i] ""`;
    	    $CON_spaceAttrs[$i] = $attr;
			if(!`objExists ($CON+"."+$attr)`)
			{
				string $scons[] = `listConnections -s 1 -d 0 -p 1 ($parcon[0]+"."+$spaceAttrs[$i])`;
				string $parts[];
				tokenize($scons[0], ".", $parts);
				$CON_spaceAttrs[$i] = $parts[1];
			}
    	}
    	
    	//  print $spaceAttrs;
    	
    	string $result;
    	if(`textScrollList -exists ($limb+"SpaceLST")`)
    	{
    		string $results[] = `textScrollList -q -si ($limb+"SpaceLST")`;
    		$result = $results[0];
    	}
    	else
    	{
    		string $cmd = "confirmDialog -title \"Select Space\" -message \"Select desired space for result\"";
    		for($attr in $spaceAttrs)
    			$cmd += (" -button \""+$attr+"\"");
    
    		$cmd += " -cancelButton \"No\" -dismissString \"No\"";
    		$result = eval($cmd);
    	}
    	
    	
    	for($attr in $CON_spaceAttrs)
    	{
        	setAttr ($CON+"."+$attr) 0;
        	if($attr == $result)
        	    setAttr ($CON+"."+$attr) 1;
        }
    		
    	string $dup[] = ls("-l", `duplicate -rr $CON`);
    	string $conJt = "";
    	if($limb == "leg")
    		$conJt = `substitute "ik" $ejt "anim"`;
    	else if($limb == "arm")
    		$conJt = `substitute "ik" $effectorJoint[0] "anim"`;
    	
    	//  print ($conJt+"\n");
    	//  select -r $conJt;
    	
    	//  ZERO FK NODES
    	
    	string $fkDup[] = `duplicate -rr $fkNodes[size($fkNodes)-1]`;
    	string $fkCurves[] = `listRelatives -ad -type nurbsCurve -pa $fkDup`;
    	select -r $fkDup;
    	//  print $fkCurves;
    	string $fkDupCon = "";
    	for($fkCurve in $fkCurves)
    	{
    		//  string $fkCurve = $fkCurves[0];
    		//  string $fkCurve = $fkCurves[1];
    		//  string $fkCurve = $fkCurves[2];
    		//  string $fkCurve = $fkCurves[3];
    		
    		//  select -r $fkCurve;
    		if(`getAttr ($fkCurve+".v")`)
    		{
    			string $fkParent[] = `listRelatives -parent -pa $fkCurve`;
    			//  print $fkParent;
    			
    			string $attrs[] = `listAttr -k $fkParent[0]`;
    			for($attr in $attrs)
    				setAttr ($fkParent[0]+"."+$attr) 0;
    			
    			tokenize($fkParent[0], "|", $parts);
    			string $conParts[];
    			tokenize($conJt, ":", $conParts);
    			//  print ("COMPARE: "+$parts[size($parts)-1]+" TO: "+$conJt+"\n");
    			if($parts[size($parts)-1] == $conJt)
    				$fkDupCon = $fkParent[0];
    		}
    	}
    
    	if(!size($fkDupCon))
    	{
    		for($fkCurve in $fkCurves)
    		{
    			if(`getAttr ($fkCurve+".v")`)
    			{
    				string $fkParent[] = `listRelatives -parent -pa $fkCurve`;
    				//  print $fkParent;
    				
    				tokenize($fkParent[0], "|", $parts);
    				string $conParts[];
    				tokenize($conJt, ":", $conParts);
    				//  print ("COMPARE: "+$parts[size($parts)-1]+" TO: "+$conParts[size($conParts)-1]+"\n");
    				if($parts[size($parts)-1] == $conParts[size($conParts)-1])
    					$fkDupCon = $fkParent[0];
    			}
    		}
    	}
    	//  print ("FOUND: "+$fkDupCon+"\n");
    	//select -r $fkDupCon;
    
    	string $loc[] = `spaceLocator`;
    	delete `parentConstraint -w 1 $fkDupCon $loc[0]`;
    	
    	string $dupLoc[] = `spaceLocator`;
    	delete `parentConstraint -w 1 $dup[0] $dupLoc[0]`;
    	
    	//  CHECK TO SEE IF BOTH LOCS ARE IN THE SAME PLACE
    	
    	float $dp[] = `xform -q -ws -rp $loc[0]`;
    	float $dp1[] = `xform -q -ws -rp $dupLoc[0]`;
    	float $dist = getDistFromFloats($dp, $dp1);
    	string $zeroCheck = $dist;
    	if(`gmatch $zeroCheck "*e*"`)
    		$dist = 0;
    	
    	//  print ("DIST: "+$dist+"\n");
    	
    	if($dist != 0)
    	{
    		string $dupGrp = `group $dup`;
    		parent $dupGrp $dupLoc[0];
    		parent $dupLoc[0] $loc[0];
    		setAttr -type double3 ($dupLoc[0]+".t") 0 0 0;
    		setAttr -type double3 ($dupLoc[0]+".r") 0 0 0;
    		delete $fkDup;
    		
    		//print ("\nPARENT CONSTRAINING: "+$CON+" TO: "+$conJt+"\n");
    		string $pcList[] = `parentConstraint -w 1 $conJt $loc[0]`;
    		parent $dupGrp $conParent[0];
    		string $dup1[] = ls("-l", `duplicate -rr $CON`);
    		//  print $dup1;
    		if(size($dup1) == 2)
    			parentConstraint -w 1 $dup1[1] $dup1[0];
    		else
    		{
    			string $parts[];
    			tokenize($dup[0], "|", $parts);
    			parentConstraint -w 1 $parts[size($parts)-1] $dup1[0];
    		}
    		setAttr ($CON+".tx") `getAttr ($dup1[0]+".tx")`;
    		setAttr ($CON+".ty") `getAttr ($dup1[0]+".ty")`;
    		setAttr ($CON+".tz") `getAttr ($dup1[0]+".tz")`;
    		setAttr ($CON+".rx") `getAttr ($dup1[0]+".rx")`;
    		setAttr ($CON+".ry") `getAttr ($dup1[0]+".ry")`;
    		setAttr ($CON+".rz") `getAttr ($dup1[0]+".rz")`;		
    		delete $dup1 $dupGrp;
    	}
    	else
    	{
    		$dup = `parent $dup[0] $loc[0]`;
    		delete $fkDup;
    		
    		//print ("\nPARENT CONSTRAINING: "+$CON+" TO: "+$conJt+"\n");
    		string $pcList[] = `parentConstraint -w 1 $conJt $loc[0]`;
    		string $parent[] = `listRelatives -parent -pa $CON`;
    		parent $dup[0] $parent[0];
    		setAttr ($CON+".tx") `getAttr ($dup[0]+".tx")`;
    		setAttr ($CON+".ty") `getAttr ($dup[0]+".ty")`;
    		setAttr ($CON+".tz") `getAttr ($dup[0]+".tz")`;
    		string $dup1[] = `duplicate -rr $CON`;
    		orientConstraint -w 1 $dup[0] $dup1[0];
    		setAttr ($CON+".rx") `getAttr ($dup1[0]+".rx")`;
    		setAttr ($CON+".ry") `getAttr ($dup1[0]+".ry")`;
    		setAttr ($CON+".rz") `getAttr ($dup1[0]+".rz")`;
    		delete $dup $dup1 $dupLoc;
    	}
    	delete $loc;
    		
    	if($key)
    	{
    		//  GET PREVIOUS KEYFRAME SO WE CAN KEY THE SWITCH
    		/*
    		string $anims[] = `listConnections -s 1 -d 0 -type animCurve ($CON+".tx")`;
    		if(size($anims))
    		{
        		float $keys1[] = `keyframe -q -tc $anims[0]`;
        		if(size($keys1))
        		{
        			print("\tKEYFRAMING SWITCH: "+$node+" @ FRAME: "+$keys1[size($keys1)-1]+"\n");
        			setKeyframe -t $keys1[size($keys1)-1] -v 1 -itt "stepnext" -ott "step" ($node+".FK_IK");
        		}
    		}
    		else
    		{
    		    if($mode == 0)
    		    {
        		    for($k=0;$k<size($keys);$k++)
        		    {
        		        if($keys[$k] >= `currentTime -q`)
        		            break;
        		    }
        			print("\tKEYFRAMING SWITCH: "+$node+" @ FRAME: "+(`currentTime -q` - 1)+"\n");
        			setKeyframe -t (`currentTime -q` - 1) -v 0 -itt "stepnext" -ott "step" ($node+".FK_IK");
        			print("\tKEYFRAMING SWITCH: "+$node+" @ FRAME: "+`currentTime -q`+"\n");
        			setKeyframe -t `currentTime -q` -v 1 -itt "stepnext" -ott "step" ($node+".FK_IK");
        		}
    		}
    		*/
    		setKeyframe ($CON+".tx");
    		setKeyframe ($CON+".ty");
    		setKeyframe ($CON+".tz");
    		setKeyframe ($CON+".rx");
    		setKeyframe ($CON+".ry");
    		setKeyframe ($CON+".rz");
    		
    		for($attr in `listAttr -ud -k $CON`)
    			setKeyframe ($CON+"."+$attr);
    	}
    
    	$ikHandles = stringArrayRemove({$rootIKHandle}, $ikHandles);
    	if(size($ikHandles))
    	{
    		/*    TOO SPECIFIC
    		//  POSITION TOE...THERE'S ONLY ONE AXIS AVAILABLE FOR THE TOE IN IK MODE...SO WHY ISN'T THE FK RESTRICTED???
    		
    		float $rz = `getAttr ($fkNodes[0]+".rz")`;
    		setAttr ($CON+".Toe_Wiggle") $rz;
    		*/
    		
    		//  GET JOINTS CONTROLLED BY IK HANDLE AND CHECK POSITIONS AGAINST FK
    		
    		//  GET JOINTS
    		
    		string $jtList[];
    		clear $jtList;
    		for($ikHandle in $ikHandles)
    		{
    			//  string $ikHandle = $ikHandles[0];
    			//  string $ikHandle = $ikHandles[1];
    			string $startJt = $endJt = "";
    			int $min = 1000000;
    			string $sj[] = ls("-l", `listConnections -s 1 -d 0 -type joint ($ikHandle+".startJoint")`);
    			string $parts[];
    			tokenize($sj[0], "|", $parts);
    			if(size($parts) < $min)
    			{
    				$min = size($parts);
    				$startJt = $sj[0];
    			}
    		
    			$sj = `ls $startJt`;
    			$startJt = $sj[0];
    			print("\nSTART JT: "+$startJt+"\n");
    			$jtList[size($jtList)] = $startJt;
    			
    			//  GET END JOINT
    			
    			int $max = 0;
    			string $ee[] = ls("-l", `listConnections -s 1 -d 0 ($ikHandle+".endEffector")`);
    			tokenize($ee[0], "|", $parts);
    			if(size($parts) > $max)
    			{
    				$max = size($parts);
    				string $parent[] = `listRelatives -parent $ee[0]`;
    				string $childJt[] = `listRelatives -c -type joint -pa $parent[0]`;
    				$endJt = $childJt[0];
    			}
    			
    			print("END JT: "+$endJt+"\n");
    			$jtList[size($jtList)] = $endJt;
    		}
    		
    		$jtList = stringArrayRemoveDuplicates($jtList);
    		
    		for($jt in $jtList)
    		{
    			//  CHECK POSITION AGAINST FK
    			
    			//  string $jt = $jtList[0];
    			//  string $jt = $jtList[1];
    			//  string $jt = $jtList[2];
    			string $fkJt = `substitute "ik" $jt "anim"`;
    			if(`objExists $fkJt`)
    			{
    				float $p[] = `xform -q -ws -rp $jt`;
    				float $p1[] = `xform -q -ws -rp $fkJt`;
    				float $dist = getDistFromFloats($p, $p1);
    				string $zeroCheck = $dist;
    				if(`gmatch $zeroCheck "*e*"`)
    					$dist = 0;
    				
    				print("DIST: "+$dist);
    				if($dist == 0)
    					print ("  -----  "+$jt+"  -----  ALIGNED\n");
    				else if($dist < $tolerance)
    					print ("  -----  "+$jt+"  -----  WITHIN TOLERANCE\n");
    				else
    				{
    					print ("  -----  "+$jt+"  -----  NOT ALIGNED\n");
    					
    					//  USE A TEMP JOINT TO ALIGN CON
    					
    					string $dupCon[] = `duplicate -rr $CON`;
    					string $dupCon1[] = `duplicate -rr $CON`;
    					float $cp[] = `xform -q -ws -rp $CON`;
    					string $tmpjt = `joint -p $cp[0] $cp[1] $cp[2]`;
    					string $tmpjt1 = `joint -p $p[0] $p[1] $p[2]`;
    					joint -e -zso -oj xyz -sao yup $tmpjt;
    					parent $dupCon[0] $tmpjt;
    					string $tmpIK[] = `ikHandle -sol ikSCsolver -sj $tmpjt -ee $tmpjt1`;
    					move -a $p1[0] $p1[1] $p1[2] $tmpIK[0];
    					print ("DUP CON: "+$dupCon[0]+"\n");
    					print ("DUP CON1: "+$dupCon1[0]+"\n");
    					delete `orientConstraint -w 1 $dupCon[0] $dupCon1[0]`;
    					setAttr ($CON+".rx") `getAttr ($dupCon1[0]+".rx")`;
    					setAttr ($CON+".ry") `getAttr ($dupCon1[0]+".ry")`;
    					setAttr ($CON+".rz") `getAttr ($dupCon1[0]+".rz")`;
    
    					if($key)
    					{
    						setKeyframe ($CON+".rx");
    						setKeyframe ($CON+".ry");
    						setKeyframe ($CON+".rz");
    					}
    					
    					$p = `xform -q -ws -rp $jt`;
    					$dist = getDistFromFloats($p, $p1);
    					string $zeroCheck = $dist;
    					if(`gmatch $zeroCheck "*e*"`)
    						$dist = 0;
    					
    					if($dist == 0)
    					{
    						print ("-----  "+$jt+" ALIGNED BY ROTATING "+$CON+"  -----\n");
    						delete $tmpjt $dupCon1;
    					}
    					else
    					{
    						print ("-----  UNABLE TO ALIGN: "+$jt+"  -----\n");
    						undo;
    						delete $dupCon $dupCon1;
    					}
    				}
    			}
    			else
    			{
    				print("-----  NO MATCHING FK NODE FOUND FOR: "+$jt+"  -----  CHECKING PARENT\n");
    				
    				//  CHECK ORIENTATION OF PARENT
    				//  string $jt = $jtList[size($jtList)-1];
    				string $ikParent[] = `listRelatives -parent -pa $jt`;
    				$fkJt = `substitute "ik" $ikParent[0] "anim"`;
    				if(`objExists $fkJt`)
    				{
    					string $loc[] = `spaceLocator`;
    					delete `parentConstraint -w 1 $ikParent[0] $loc[0]`;
    					string $dup[] = `duplicate -rr $loc[0]`;
    					parent $dup[0] $loc[0];
    					string $loc1[] = `spaceLocator`;
    					delete `parentConstraint -w 1 $fkJt $loc1[0]`;
    					orientConstraint -w 1 $loc1[0] $dup[0];
    					
    					float $r[] = `getAttr ($dup[0]+".r")`;
    					delete $loc $loc1;
    					
    					//  FIND CONTROL TO ALIGN IK JT TO FK
    					
    					string $cons[] = `listConnections -type "ikHandle" $ikParent[0]`;
    					string $parent[] = `listRelatives -parent -pa $cons[0]`;
    					$cons = `listConnections -s 1 -d 0 -scn 1 -c 1 -p 1 $parent[0]`;
    					if(size($cons))
    					{
        					string $sourceAttr = `substitute ($parent[0]+".") $cons[0] ""`;
        					switch($sourceAttr)
        					{
        						case "rotateX":
        							setAttr $cons[1] $r[0];
        							break;
        						case "rotateY":
        							setAttr $cons[1] $r[1];
        							break;
        						case "rotateZ":
        							setAttr $cons[1] $r[2];
        							break;
        						default:
        							break;
        					}
        					print ("-----  "+$jt+"  -----  ALIGNED USING: "+$cons[1]+"\n");
                        }
                        
    					if($key)
    						setKeyframe $cons[1];
    				}
    				else
    					print ("-----  UNABLE TO FIND MATCHING FK NODE FOR: "+$ikParent[0]+"\n");
    			}    //  end of fkJt condition
    		}    //  end of jtList loop
    	}    //  end of ikHandles condition
    	
    	////////////////////////////////////////////////////////////////////////////////////////////////////////////
    			
    	//CHECK MID JT FOR ALIGNMENT
    
    	//  CHECK FOR POLE VECTOR CONSTRAINTS
    	
    	string $cons[] = stringArrayRemoveDuplicates(`listConnections -s 1 -d 0 -type poleVectorConstraint $rootIKHandle`);
    	if(size($cons))
    	{
    		//  GET MID JT TO CHECK
    		
    		string $startJt[] = `listConnections -s 1 -d 0 -type joint ($rootIKHandle+".startJoint")`;
    		string $effector[] = `listConnections -s 1 -d 0 -type ikEffector ($rootIKHandle+".endEffector")`;
    		string $midJt[] = `listRelatives -parent $effector`;
    		
    		print ("MID JOINT: "+$midJt[0]+"  ---  ");
    		//  select -r $ik;
    		float $p0[] = `xform -q -ws -rp $midJt[0]`;
    		string $fk = `substitute "ik" $midJt[0] "anim"`;
    		//  select -r $fk;
    		float $p1[] = `xform -q -ws -rp $fk`;
    		float $dist = getDistFromFloats($p0, $p1);
    		
    		string $zeroCheck = $dist;
    		if(`gmatch $zeroCheck "*e*"`)
    			$dist = 0;
    			
    		if($dist == 0)
    			print ("OK\n");
    		else
    		{
    			print "NOT OK\n";
    			
    			//  ROTATE POLE CONTROL ALONG IK HANDLE AXIS
    			
    			float $startP[] = `xform -q -ws -rp $startJt[0]`;
    			float $endP[] = `xform -q -ws -rp $effector[0]`;
    			vector $adj = getVectorFromFloats($startP, $endP);
    			vector $hypot = getVectorFromFloats($p0, $endP);
    			float $hypotLength = getDistFromFloats($p0, $endP);
    			float $angle = rad_to_deg( angle($hypot, $adj) );
    			float $adjLength = cosd($angle) * $hypotLength;
    			vector $adjV = unit($adj) * $adjLength;
    			float $x = $endP[0] + $adjV.x;
    			float $y = $endP[1] + $adjV.y;
    			float $z = $endP[2] + $adjV.z;
    			
    			string $loc[] = `spaceLocator`;
    			move -a $x $y $z $loc;
    			
    			vector $v1 = getVectorFromFloats($p0, {$x, $y, $z});
    			vector $v2 = getVectorFromFloats($p1, {$x, $y, $z});
    			float $angle1 = rad_to_deg( angle($v1, $v2) );
    			
    			//  select -r $poleCtl;
    			
    			//  CREATE A TEMP RIG TO GET POLE POSITION
    			
    			string $startLoc[] = `spaceLocator`;
    			delete `pointConstraint -w 1 $startJt[0] $startLoc[0]`;
    			delete `aimConstraint -offset 0 0 0 -weight 1 -aimVector 0 0 1 -upVector 0 1 0 -worldUpType "vector" -worldUpVector 0 1 0 $startLoc[0] $loc[0]`;
    			string $poleLoc[] = `spaceLocator`;
    			delete `pointConstraint -w 1 $poleCtl $poleLoc[0]`;
    			parent $poleLoc[0] $loc[0];
    			string $grp = `group $poleLoc`;
    			xform -ws -piv $x $y $z $grp;
    			setAttr ($grp+".rz") $angle1;
    			float $resultP[] = `xform -q -ws -rp $poleLoc[0]`;
    			move -a $resultP[0] $resultP[1] $resultP[2] $poleCtl;
    			$resultP = `xform -q -ws -rp $midJt[0]`;
    			$dist = getDistFromFloats($p1, $resultP);
    			
    			string $zeroCheck = $dist;
    			if(`gmatch $zeroCheck "*e*"`)
    				$dist = 0;
    			
    			print("\tDIST: "+$dist+"\n");
    			if( $dist != 0)
    			{
    				print "\tREVERSING POLE ADJUSTMENT\n";
    				setAttr ($grp+".rz") (-$angle1);
    				$resultP = `xform -q -ws -rp $poleLoc[0]`;
    				move -a $resultP[0] $resultP[1] $resultP[2] $poleCtl;
    				$resultP = `xform -q -ws -rp $midJt[0]`;
    				float $dist1 = getDistFromFloats($p1, $resultP);
    				print("\tDIST1: "+$dist1+"\n");
    				
    				if($dist < $dist1)
    				{
    					print "\tPREVIOUS POLE ADJUSTMENT WAS CLOSER...REVERSING\n";
    					setAttr ($grp+".rz") $angle1;
    					$resultP = `xform -q -ws -rp $poleLoc[0]`;
    					move -a $resultP[0] $resultP[1] $resultP[2] $poleCtl;
    				}
    			}
    			
    			if($key)
    			{
    				for($attr in `listAttr -k $poleCtl`)
        				setKeyframe ($poleCtl+"."+$attr);
    			}
    			
    			delete $loc $startLoc;
    			print ("MID JOINT: "+$midJt[0]+"  ---  ALIGNED\n");
    		}
    	}    //end of poleVector constraint condition
    	
    	print ("\n-----  UNLOCKING "+$midIKJt+"  -----\n\n");
    	setAttr ($midIKJt+".jointTypeX") 1;
    	setAttr ($midIKJt+".jointTypeY") 1;
    	setAttr ($midIKJt+".jointTypeZ") 1;
	
    	if($keys[$k] != `currentTime -q`)
        	print ("FRAME "+`currentTime -q`+": FINISHED SNAPPING IK TO FK\n");
    	else
        	print ("FRAME "+$keys[$k]+": FINISHED SNAPPING IK TO FK\n");
    }    //  end of keys
    
    if($key)
    {
        print "\n-----  KEYING SWITCH  -----\n";
        //  KEY FRAME SWITCH NODE

        if($mode)
        {
            if($start != 0)
            {
                setKeyframe -t $keys[$start-1] -v 0 -itt "stepnext" -ott "step" ($node+".FK_IK");
                print ("SETTING KEYFRAME FOR: "+$node+" @ "+$keys[$start-1]+" == 0\n");
            }
            
            for($k=$start;$k<=$end;$k++)
            {
                if($k == $end)
                {
                    setKeyframe -t $keys[$k] -v 0 -itt "stepnext" -ott "step" ($node+".FK_IK");
                    print ("SETTING KEYFRAME FOR: "+$node+" @ "+$keys[$k]+" == 0\n");
                }
                else
                {
                    setKeyframe -t $keys[$k] -v 1 -itt "stepnext" -ott "step" ($node+".FK_IK");
                    print ("SETTING KEYFRAME FOR: "+$node+" @ "+$keys[$k]+" == 1\n");
                }
            }
        }
        else
        {
            print "\t-----  CURRENT FRAME MODE  -----\n";
            //  print $start;
            if($start != 0)
            {
            	//  print $keys[$start];
            	if($keys[$start] == `currentTime -q`)
            	{
                    print ("\t"+$keys[$start]+" == "+`currentTime -q`+"\n");
                    setKeyframe -t $keys[$start-1] -v 0 -itt "stepnext" -ott "step" ($node+".FK_IK");
                    print ("SETTING KEYFRAME FOR: "+$node+" @: "+$keys[$start-1]+"\n");
                    setKeyframe -t $keys[$start] -v 1 -itt "stepnext" -ott "step" ($node+".FK_IK");
                    print ("SETTING KEYFRAME FOR: "+$node+" @: "+$keys[$start]+"\n");
            	}
            	else if($keys[$start] < `currentTime -q`)
            	{
                    print ("\t"+$keys[$start]+" < "+`currentTime -q`+"\n");
                    setKeyframe -t $keys[$start] -v 0 -itt "stepnext" -ott "step" ($node+".FK_IK");
                    print ("SETTING KEYFRAME FOR: "+$node+" @: "+$keys[$start]+"\n");
                    setKeyframe -t `currentTime -q` -v 1 -itt "stepnext" -ott "step" ($node+".FK_IK");
                    print ("SETTING KEYFRAME FOR: "+$node+" @: "+`currentTime -q`+"\n");
                }
                else
                    print "\t-----  DID NOTHING  -----\n";
            }
            else
                print ("\t-----  START: "+$start+"  -----\n");
        }
    }
    
	select -r $CON;
	setToolTo $gMove;
}	//  end of snapIKtoFK


////////////////////////////////

global proc IKFKSwitcher()
{
    string $refs[] = `ls -type reference`;
    string $rmList[];
    clear $rmList;
    for($ref in $refs)
    {
        //  string $ref = $refs[0];
        string $name = `substitute "RN" $ref ""`;
        string $check[] = stringArrayCatenate(`ls ($name+":legIKFK_*_anim")`, `ls ($name+":armIKFK_*_anim")`);
        if(!size($check))
            $rmList[size($rmList)] = $ref;
    }
    
    $refs = stringArrayRemove($rmList, $refs);
	if(!size($refs))
	{
		$refs = stringArrayRemove({"UI", "shared"}, `namespaceInfo -lon`);
		clear $rmList;
		for($ref in $refs)
		{
			//  string $ref = $refs[0];
			string $check[] = stringArrayCatenate(`ls ($ref+":legIKFK_*_anim")`, `ls ($ref+":armIKFK_*_anim")`);
			if(!size($check))
				$rmList[size($rmList)] = $ref;
		}
	}
    $refs = stringArrayRemove($rmList, $refs);
    
	if (`window -exists "IKFKSwitcherUI"`)
		deleteUI "IKFKSwitcherUI";
	
    string $window = `window -title "IKFK Switch" IKFKSwitcherUI`;
    columnLayout -adj true spaceCLM;
    //radioButtonGrp -numberOfRadioButtons 2 -vr -label "             Mode: " -labelArray2 "Current Frame" "Time Line" -cal 1 "left" modeBTN;
    //separator;
    radioButtonGrp -numberOfRadioButtons 2 -vr -label "    Key Results: " -labelArray2 "No" "Yes" -cal 1 "left" keyBTN;
    separator;
	
	//  GET SPACE ATTRIBUTES ON CONSTRAINT
    
    string $CON = "handIk_Lt_anim";
    if(size($refs))
        $CON = (`substitute "RN" $refs[0] ""`+":"+$CON);

	string $parent[] = `listRelatives -parent -pa $CON`;
	
	string $parcon[] = stringArrayRemoveDuplicates(`listConnections -s 1 -d 0 -type "parentConstraint" $parent[0]`);
	while(!size($parcon))
	{
		$parent = `listRelatives -parent -pa $parent[0]`;
		$parcon = stringArrayRemoveDuplicates(`listConnections -s 1 -d 0 -type "parentConstraint" $parent[0]`);
	}
	
	string $spaceAttrs[] = `listAttr -ud $parcon[0]`;
	string $CON_spaceAttrs[];
	for($i=0;$i<size($spaceAttrs);$i++)
	{
	    string $suffix = `match "W[0-9]$" $spaceAttrs[$i]`;
	    //$spaceAttrs[$i] = `substitute $suffix $spaceAttrs[$i] ""`;
	    string $attr = `substitute $suffix $spaceAttrs[$i] ""`;
	    $CON_spaceAttrs[$i] = $attr;
	    if(!`objExists ($CON+"."+$attr)`)
	    {
	        string $scons[] = `listConnections -s 1 -d 0 -p 1 ($parcon[0]+"."+$spaceAttrs[$i])`;
	        string $parts[];
	        tokenize($scons[0], ".", $parts);
	        $CON_spaceAttrs[$i] = $parts[1];
	    }
	}

    text -label "Arm Spaces" -h 30 -bgc 0.15 0.15 0.15;
    separator;
    string $cmd = ("textScrollList -numberOfRows "+size($spaceAttrs));
    int $index = 0;
    for($i=0;$i<size($CON_spaceAttrs);$i++)
    {
    	$cmd += (" -append \""+$CON_spaceAttrs[$i]+"\"");
    	if(`getAttr ($CON+"."+$CON_spaceAttrs[$i])`)
    	    $index = $i+1;
    }
    $cmd += (" -sii "+$index+" armSpaceLST");
    eval($cmd);
    separator;
	button -h 30 -bgc .1 .2 .5 -label "Switch Arm" -c ("string $sel[] = `ls -sl`;\nif\(size\($sel\)\)\n\tikfkSwitch\($sel[0]\);\nelse\n\terror\(\"Must select an appropriate part of the character\"\)");
    separator;
	
	//  GET SPACE ATTRIBUTES ON CONSTRAINT
    
    clear $spaceAttrs $CON_spaceAttrs;
    $CON = `substitute "hand" $CON "leg"`;
	$parent = `listRelatives -parent -pa $CON`;
	
	$parcon = stringArrayRemoveDuplicates(`listConnections -s 1 -d 0 -type "parentConstraint" $parent[0]`);
	while(!size($parcon))
	{
		$parent = `listRelatives -parent -pa $parent[0]`;
		$parcon = stringArrayRemoveDuplicates(`listConnections -s 1 -d 0 -type "parentConstraint" $parent[0]`);
	}

	$spaceAttrs = `listAttr -ud $parcon[0]`;
	for($i=0;$i<size($spaceAttrs);$i++)
	{
	    string $suffix = `match "W[0-9]$" $spaceAttrs[$i]`;
	    //$spaceAttrs[$i] = `substitute $suffix $spaceAttrs[$i] ""`;
	    string $attr = `substitute $suffix $spaceAttrs[$i] ""`;
	    $CON_spaceAttrs[$i] = $attr;
	    if(!`objExists ($CON+"."+$attr)`)
	    {
	        string $scons[] = `listConnections -s 1 -d 0 -p 1 ($parcon[0]+"."+$spaceAttrs[$i])`;
	        string $parts[];
	        tokenize($scons[0], ".", $parts);
	        $CON_spaceAttrs[$i] = $parts[1];
	    }
	}

    text -label "Leg Spaces" -h 30 -bgc 0.15 0.15 0.15;
    separator;
    string $cmd = ("textScrollList -numberOfRows "+size($spaceAttrs));
    int $index = 0;
    for($i=0;$i<size($CON_spaceAttrs);$i++)
    {
    	$cmd += (" -append \""+$CON_spaceAttrs[$i]+"\"");
    	if(`getAttr ($CON+"."+$CON_spaceAttrs[$i])`)
    	    $index = $i+1;
    }
    $cmd += (" -sii "+$index+" legSpaceLST");
    eval($cmd);
    separator;
	button -h 30 -bgc .1 .2 .5 -label "Switch Leg" -c ("string $sel[] = `ls -sl`;\nif\(size\($sel\)\)\n\tikfkSwitch\($sel[0]\);\nelse\n\terror\(\"Must select an appropriate part of the character\"\)");
	showWindow $window;
	window -e -w 258 $window;
	
	scriptJob -p "IKFKSwitcherUI" -e "SelectionChanged" "updateSpaceSwitch";
}    //  end of IKFKSwitcher

IKFKSwitcher();