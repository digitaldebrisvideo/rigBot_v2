//global proc doMirrorPose ( int $mirrorPlane, int $mode, int $face )
global proc doMirrorPose ( int $mode, int $face )
{
	//GET MIRROR PLANE
	//xy = 1
	//xz = 2
	//yz = 3
	
	int $mirrorPlane = 3;
	
	//GET SELECTED OBJECT HIERARCHY
	
	string $sel[] = `ls -sl`;
	string $parts[];
	tokenize($sel[0], ":", $parts);
	string $ref = "";
	string $allCtls = "all_ctrls";
	if(size($parts) > 1)
	{
	    $ref = $parts[0];
	    $allCtls = ($ref+":"+$allCtls);
	}
	
    string $faceSet = "facial_ctrl";
    string $bodySet = "body_ctrls";
    
	//GET LIST OF KEYABLE NODES
	string $list[];
	clear $list;
	if($mode == 3)
	    $list = $sel;
	else
	{
    	if(`objExists $allCtls`)
    		$list = `sets -q $allCtls`;
    	
    	//  LOCAL MODE EXCLUDE LIST
    	
    	if($mode == 1)
    	{
        	string $rmList[] = {"world_anim", "character_Mid_anim", "character02_Mid_anim"};
        	if(size($ref))
        	{
        	    for($i=0;$i<size($rmList);$i++)
        	        $rmList[$i] = ($ref+":"+$rmList[$i]);
        	}
        	
        	$list = stringArrayRemove($rmList, $list);
    	}
	
    	//  print $list;
    	
    	//  ACCOUNT FOR FACE OPTION
    	
        if(size($ref))
        {
            $faceSet = ($ref+":"+$faceSet);
            $bodySet = ($ref+":"+$bodySet);
        }
                	    
    	if(!$face && `objExists $faceSet`)
    	    $list = stringArrayRemove(`sets -q $faceSet`, $list);
	}

    if($mode != 3)
    {
    	//SPLIT LIST INTO RIGHT SIDE, LEFT SIDE AND CENTER
    	string $rList[], $lList[], $cList[];
    	clear $rList $lList $cList;
    	for($node in $list)
    	{
    		if(`gmatch $node "R_*"`)
    		{
    			$rList[size($rList)] = $node;
    		}
    		else if(`gmatch $node "L_*"`)
    		{
    			$lList[size($lList)] = $node;
    		}
    		else if(`gmatch $node "Rt_*"`)
    		{
    			$rList[size($rList)] = $node;
    		}
    		else if(`gmatch $node "Lt_*"`)
    		{
    			$lList[size($lList)] = $node;
    		}
    		else if(`gmatch $node "*_Rt_*"`)
    		{
    			$rList[size($rList)] = $node;
    		}
    		else if(`gmatch $node "*_Lt_*"`)
    		{
    			$lList[size($lList)] = $node;
    		}
    		else
    		{
    			$cList[size($cList)] = $node;
    		}
    	}
    	/*
    	print "RIGHT SIDE NODES\n";print $rList;print "\n";
    	print "LEFT SIDE NODES\n";print $lList;print "\n";
    	print "CENTER NODES\n";print $cList;print "\n";
    	*/
    	//LOOP THRU LIST AND MIRROR VALUES
    	//MIRRORING CENTER ABOUT ROOT
    	//float $p[] = `xform -q -ws -rp ($ref+":world_anim")`;
    	
    	float $p[3];
    	$p = {0.0, 0.0, 0.0};
    	
    	string $rootParent[];
    	if($mode == 1)
    	{
    	    $p = `xform -q -ws -rp ($ref+":root_Mid_anim")`;
        	$rootParent = `listRelatives -parent -pa ($ref+":root_Mid_anim")`;
        	while(!size(`listRelatives -c -type nurbsCurve $rootParent[0]`))
        	    $rootParent = `listRelatives -parent -pa $rootParent[0]`;
        	
        	//  print $rootParent;
    	}
    	
    	//CENTER NODES
    	for($node in $cList)
    	{
    		int $skip = 0;
    		if($mode==1)
    		{
    		    $skip = 1;
    		    
    		    if(`gmatch $node "*neck*"`)
    		        $skip = 0;
    
            	//  ADD FACIAL CONTROLS
            	if($face && `objExists $faceSet`)
            	{
            	    for($faceNode in `sets -q $faceSet`)
            	    {
            	        if($node == $faceNode)
            	            $skip = 0;
            	    }
            	}
        		
        		//  CHECK FOR BODY CONTROLS
        		
        		for($body in `sets -q $bodySet`)
        		{
        		    if($node == $body)
        		        $skip = 0;
        		}
    		}
    		
    		if(!$skip)
    		{
        		//GET ALL KEYABLE ATTRIBUTES
        		
        		//  print("MIRRORING: "+$node+"\n");
        		
        		string $attrs[] = stringArrayRemove(`listAttr -l $node`, `listAttr -k $node`);
        		for($attr in $attrs)
        		{
        			int $size = size($attr);
        			string $transform = `substring $attr 1 ($size-1)`;
        			string $axis = `substring $attr $size $size`;
        			
        			switch($mirrorPlane)
        			{
        				case 1:	//xy
        					break;
        				case 2:	//xz
        					break;
        				case 3:	//yz
        					switch($transform)
        					{
        						case "translate":
        							if($axis == "X")
        							{
        								float $val = `getAttr ($node+"."+$attr)`;
        								setAttr ($node+"."+$attr) (-$val);
        							}
        							break;
        						case "rotate":
        							if($axis == "Y" || $axis == "X")
        							{
        								float $val = `getAttr ($node+"."+$attr)`;
        								setAttr ($node+"."+$attr) (-$val);
        							}
        							break;
        						case "scale":
        							break;
        						default:
        							break;
        					}
        					break;
        				default:
        					break;
        			}	//end of mirrorPlane
        		}	//end of attrs loop
        	}    //  end of skip
        	else
        	    print ("SKIPPING: "+$node+"\n");
    	}	//end of cList
    	
    	//CREATE A COMMAND STRING SO AS NOT TO LOSE CURRENT VALUES
    	string $cmd = "";
    	
    	//RIGHT SIDE
    	for($node in $rList)
    	{
    		//  string $node = $rList[0];
    		string $mirrorNode = `substitute "_Rt_" $node "_Lt_"`;
    		
			if(`objExists $mirrorNode`)
			{
				//  CHECK FOR JOINT
				int $isJt = 0;
				if(`nodeType $node` == "joint")
				{
					//  print ("-----  JOINT FOUND: "+$node+"  -----\n");
					$isJt = 1;
				}
		
				//GET ALL KEYABLE ATTRIBUTES
				string $attrs[] = stringArrayRemove(`listAttr -l $node`, `listAttr -k $node`);
				for($attr in $attrs)
				{
					//  string $attr = $attrs[2];
					int $size = size($attr);
					string $transform = `substring $attr 1 ($size-1)`;
					string $axis = `substring $attr $size $size`;
					float $val = `getAttr ($node+"."+$attr)`;
					
					if($isJt)
					{
						if($attr=="translateX")
							$val *= -1;
						else if($attr == "rotateY")
						{
							if(`gmatch $node "*legIk_*"`)
							{
								//  print "\tNEGATING ROTATE Y\n";
								$val *= -1;
							}
						}
					}
					else
					{
						//MIRROR ABOUT ROOT
						switch($mirrorPlane)
						{
							case 1:	//xy
								break;
							case 2:	//xz
								break;
							case 3:	//yz
								if($transform ==  "rotate")
								{
									if($axis == "Y" || $axis == "Z")
										$val *= -1;
								}
								break;
							default:
								break;
						}	//end of mirrorPlane switch
					}	//end joint condition
					
					string $mirrorAttr = `substitute "Rt" $attr "Lt"`;
					$cmd += ("setAttr "+$mirrorNode+"."+$mirrorAttr+" "+$val+";\n");
		
				}	//end of attrs loop
			}	//  end of objExists
    	}	//end of rList
    	
    	//LEFT SIDE
    	for($node in $lList)
    	{
    		string $mirrorNode = `substitute "_Lt_" $node "_Rt_"`;
    		
			if(`objExists $mirrorNode`)
			{
				//  CHECK FOR JOINT
				int $isJt = 0;
				if(`nodeType $node` == "joint")
				{
					//  print ("-----  JOINT FOUND: "+$node+"  -----\n");
					$isJt = 1;
				}
		
				//GET ALL KEYABLE ATTRIBUTES
				string $attrs[] = stringArrayRemove(`listAttr -l $node`, `listAttr -k $node`);
				for($attr in $attrs)
				{
					int $size = size($attr);
					string $transform = `substring $attr 1 ($size-1)`;
					string $axis = `substring $attr $size $size`;
					float $val = `getAttr ($node+"."+$attr)`;
					
					if($isJt)
					{
						if($attr=="translateX")
							$val *= -1;
						else if($attr == "rotateY")
						{
							if(`gmatch $node "*legIk_*"`)
							{
								//  print "\tNEGATING ROTATE Y\n";
								$val *= -1;
							}
						}
					}
					else
					{
						//MIRROR ABOUT ROOT
						switch($mirrorPlane)
						{
							case 1:	//xy
								break;
							case 2:	//xz
								break;
							case 3:	//yz
								if($transform == "rotate")
								{
									if($axis == "Y" || $axis == "Z")
										$val *= -1;
								}
								break;
							default:
								break;
						}	//end of mirrorPlane switch
					}	//end joint condition
					
					string $mirrorAttr = `substitute "Lt" $attr "Rt"`;
					$cmd += ("setAttr "+$mirrorNode+"."+$mirrorAttr+" "+$val+";\n");
		
				}	//end of attrs loop
			}	//  end of objExists
    	}	//end of lList
    	
    	//  print $cmd;
    	//  evalEcho($cmd);
    	eval($cmd);
	}
	else
	{
		string $cmd = "";
		for($node in $list)
		{
    		//  DETERMINE SIDE
    		//  string $node = $list[0];
			string $check = $node;
			if(size($ref))
				$check = `substitute ($ref+":") $check ""`;
    		string $parts[];
    		tokenize($check, "_", $parts);
    		string $side = $parts[1];
    		string $mirrorSide = "Rt";
    		if($side == "Rt")
    		    $mirrorSide = "Lt";
    		
    		//  CHECK STATE OF LIMB
    		
    		string $armNodes[] = {"shoulder", "elbow", "hand"};
    		string $legNodes[] = {"thigh", "knee", "foot", "toe"};
    		
    		for($arm in $armNodes)
    		{
    		    if(`gmatch $node ("*"+$arm+"*")`)
    		    {
    		        //  GET CURRENT IK STATE
    		        
    		        int $ikState = `getAttr ($ref+":armIKFK_"+$side+"_anim.FK_IK")`;
    		        setAttr ($ref+":armIKFK_"+$mirrorSide+"_anim.FK_IK") $ikState;
    		    }
    		}
    		
    		for($leg in $legNodes)
    		{
    		    if(`gmatch $node ("*"+$leg+"*")`)
    		    {
    		        //  GET CURRENT IK STATE
    		        
    		        int $ikState = `getAttr ($ref+":legIKFK_"+$side+"_anim.FK_IK")`;
    		        setAttr ($ref+":legIKFK_"+$mirrorSide+"_anim.FK_IK") $ikState;
    		    }
    		}
    		
    		string $mirrorNode = `substitute $side $node $mirrorSide`;
    		
			if(`objExists $mirrorNode`)
			{
				//  CHECK FOR JOINT
				int $isJt = 0;
				if(`nodeType $node` == "joint")
				{
					//  print ("-----  JOINT FOUND: "+$node+"  -----\n");
					$isJt = 1;
				}

				//GET ALL KEYABLE ATTRIBUTES
				string $attrs[] = stringArrayRemove(`listAttr -l $node`, `listAttr -k $node`);
				for($attr in $attrs)
				{
					int $size = size($attr);
					string $transform = `substring $attr 1 ($size-1)`;
					string $axis = `substring $attr $size $size`;
					float $val = `getAttr ($node+"."+$attr)`;
					
					if($isJt)
					{
						if($attr=="translateX")
							$val *= -1;
						else if($attr == "rotateY")
						{
							if(`gmatch $node "*legIk_*"`)
							{
								//  print "\tNEGATING ROTATE Y\n";
								$val *= -1;
							}
						}
					}
					
					string $mirrorAttr = `substitute "Lt" $attr "Rt"`;
					$cmd += ("setAttr "+$mirrorNode+"."+$mirrorAttr+" "+$val+";\n");
				}    //  end of attrs loop
			}	//  end of objExists
    	}    //  end of list
    	
    	evalEcho($cmd);
    }    //  end of mode condition
}	//end of doMirrorPose

///////////////////////////////////////////////////

global proc assembleMirrorPoseCmd ()
{
	//int $val = `radioButtonGrp -q -sl mirrorPosePlaneRadio`;
	int $mode = `radioButtonGrp -q -sl modeBTN`;
	int $face = `checkBoxGrp -q -v1 faceCHK`;
	//doMirrorPose $val $mode $face;
	doMirrorPose $mode $face;
}

///////////////////////////////////////////////////

global proc mirrorPose()
{
	string $sel[] = `ls -sl`;
	if(!size($sel))
	    error "To mirror a character's pose, please select any part of the character you want to mirror";
	else
	{
    	string $window = "mirPosWIN";
		if(`window -exists $window`)
			deleteUI $window;
			
		$window = `window -title "Mirror Pose" mirPosWIN`;
    		columnLayout -adj true;
    		/*
    			radioButtonGrp -nrb 3
    				-label "Mirror Plane: "
    				-labelArray3 "XY" "XZ" "YZ" mirrorPosePlaneRadio;
    		*/
    			radioButtonGrp -nrb 3
    				-label "Mirror Mode: "
    				-labelArray3 "Local" "World" "Part" modeBTN;
    			checkBoxGrp -numberOfCheckBoxes 1 -label "Include Face: " faceCHK;
    			separator;
    			button -height 30 -label "Mirror Pose" 
    				-ann "mirror pose" -c "assembleMirrorPoseCmd";
    	showWindow $window;
    	//window -e -wh 416 90 $window;
    	window -e -wh 416 70 $window;
    }
}
